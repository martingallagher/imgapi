// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	DownloadRequest
	UploadRequest
	Image
	UploadResponse
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DownloadRequest struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
}

func (m *DownloadRequest) Reset()                    { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()               {}
func (*DownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DownloadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DownloadRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type UploadRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Image struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UploadResponse) Reset()                    { *m = UploadResponse{} }
func (m *UploadResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()               {}
func (*UploadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UploadResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*DownloadRequest)(nil), "service.DownloadRequest")
	proto.RegisterType((*UploadRequest)(nil), "service.UploadRequest")
	proto.RegisterType((*Image)(nil), "service.Image")
	proto.RegisterType((*UploadResponse)(nil), "service.UploadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImgAPI service

type ImgAPIClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Image, error)
}

type imgAPIClient struct {
	cc *grpc.ClientConn
}

func NewImgAPIClient(cc *grpc.ClientConn) ImgAPIClient {
	return &imgAPIClient{cc}
}

func (c *imgAPIClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := grpc.Invoke(ctx, "/service.ImgAPI/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imgAPIClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := grpc.Invoke(ctx, "/service.ImgAPI/Download", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImgAPI service

type ImgAPIServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	Download(context.Context, *DownloadRequest) (*Image, error)
}

func RegisterImgAPIServer(s *grpc.Server, srv ImgAPIServer) {
	s.RegisterService(&_ImgAPI_serviceDesc, srv)
}

func _ImgAPI_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgAPIServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ImgAPI/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgAPIServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImgAPI_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgAPIServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ImgAPI/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgAPIServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImgAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ImgAPI",
	HandlerType: (*ImgAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _ImgAPI_Upload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _ImgAPI_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x2c, 0xb9,
	0xf8, 0x5d, 0xf2, 0xcb, 0xf3, 0x72, 0xf2, 0x13, 0x53, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53,
	0x84, 0xc4, 0xb8, 0xd8, 0xd2, 0xf2, 0x8b, 0x72, 0x13, 0x4b, 0x24, 0x98, 0xc0, 0x62, 0x50, 0x9e,
	0x92, 0x32, 0x17, 0x6f, 0x68, 0x01, 0xb2, 0x46, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0xb0,
	0x56, 0x9e, 0x20, 0x30, 0x5b, 0xc9, 0x99, 0x8b, 0xd5, 0x33, 0x37, 0x31, 0x3d, 0x95, 0x58, 0x53,
	0xe1, 0x86, 0x30, 0x23, 0x19, 0xa2, 0xc0, 0xc5, 0x07, 0xb3, 0xa9, 0xb8, 0x20, 0x3f, 0xaf, 0x18,
	0xc3, 0x34, 0xa3, 0x5a, 0x2e, 0x36, 0xcf, 0xdc, 0x74, 0xc7, 0x00, 0x4f, 0x21, 0x6b, 0x2e, 0x36,
	0x88, 0x5a, 0x21, 0x31, 0x3d, 0x98, 0x9f, 0x51, 0x9c, 0x29, 0x25, 0x8e, 0x21, 0x0e, 0x31, 0x54,
	0x89, 0x41, 0xc8, 0x8c, 0x8b, 0x03, 0x16, 0x1a, 0x42, 0x12, 0x70, 0x65, 0x68, 0x01, 0x24, 0xc5,
	0x07, 0x97, 0x01, 0x7b, 0x4d, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0xaa, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xaf, 0x70, 0xd7, 0xa1, 0x66, 0x01, 0x00, 0x00,
}
